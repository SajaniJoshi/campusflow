<?xml version="1.0" encoding="utf-8"?>
<rdf:RDF
   xmlns:ns1="http://tuc.web.engineering/module#"
   xmlns:ns2="http://tuc/web/engineering/module#"
   xmlns:ns3="http://tuc/course#"
   xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
>
  <rdf:Description rdf:about="http://tuc.web.engineering/module#b91e681e-d0d1-11ee-84d6-8a36e2635a70">
    <rdf:type rdf:resource="http://tuc.web.engineering/module#"/>
    <ns1:hasModuleNumber rdf:datatype="http://www.w3.org/2001/XMLSchema#string">FCS-00020</ns1:hasModuleNumber>
    <ns1:hasName rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Algorithms and Data Structures</ns1:hasName>
    <ns1:hasContent rdf:datatype="http://www.w3.org/2001/XMLSchema#string">Lecture 1) Basic concepts regarding algorithms (corectness, complexity) 2) Recursion as a technique of programming 3) Techniques of developing algorithms: "divide and conquer", greedy and dynamic programming 4) Implementations of dictionary structure (trees and hashtables) 6) Graph data structures and graph algorithms 7) Complexity classes (P, NP, NPC, NP-hard), examples of computationally hard problems 8) Approximate algorithms and heuristics Excersises: 1) Determining time complexity of computer programs, developing effective solutions for basic computational problems 2) Practice regarding recursion and "divide and conquer (desing of algorithms, computing time complexity) 3) Solving computational problems with greedy and dynamic programming techniques. 4) Effective data structures (heaps, trees, hashtables) 5) Solving graph problems 6) Recognition of computationally hard problems and applying approximate/heuristic solutions. Computer labs: 1) Basic computational problems, optimization of algorithms in terms of time complexity (comparison, design and implemantation) 2) Solving computational problems with recursion/"divide and conquer" techniques. 3) Design and implementation of efficient algorithms (greedy and dynamic programming techniques) solving combinatorial optimization problems. 4) Implementation of tree data structures 5) Solving graph problems.</ns1:hasContent>
    <ns1:hasCreditPoints rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">6</ns1:hasCreditPoints>
    <ns1:hasWorkLoad rdf:datatype="http://www.w3.org/2001/XMLSchema#integer">168</ns1:hasWorkLoad>
    <ns2:hasUniversity rdf:resource="http://across/university#BU"/>
    <ns3:hasCourse rdf:resource="http://tuc/course#ComputerSciencevb"/>
    <ns1:hasModules rdf:resource="http://tuc.web.engineering/module#933d2154-d0c6-11ee-92dc-8a36e2635a70"/>
  </rdf:Description>
</rdf:RDF>
